# -*- coding: utf-8 -*-
"""Loan Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rhTZHBuZls4YhdGW9AwJ-mLseq41g_I7

**imorting the Dependencies**
"""

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""**Data Collection and Processing**"""

#loading the Dataset to the Pandas Dataframe
loan_dataset = pd.read_csv('/content/loan.csv')

type(loan_dataset)

#printing the first 5 rows of the data
loan_dataset.head()

# Number of rows and columns in dataset
loan_dataset.shape

# Statistical Measures
 loan_dataset.describe()

# Number of missing values in each column
loan_dataset.isnull().sum()

# Drop Missin values
loan_dataset = loan_dataset.dropna()

# Number of missing values in each column
loan_dataset.isnull().sum()

# Label encoding
loan_dataset.replace({"Loan_Status":{'N':0,'Y':1}},inplace = True)

#printing the first 5 rows of the data
loan_dataset.head()

# Depenfent column values
loan_dataset['Dependents'].value_counts()

# Replacing the 3+ values is like 4
loan_dataset = loan_dataset.replace(to_replace='3+',value=4)

# Depenfent column values
loan_dataset['Dependents'].value_counts()

"""**DATA VISUALIZATION**"""

# Education and loan status
sns.countplot(x='Education',hue='Loan_Status',data=loan_dataset)

# Married status and loan status
sns.countplot(x='Married',hue='Loan_Status',data=loan_dataset)

# Gender and Loan status
sns.countplot(x='Gender',hue='Loan_Status',data=loan_dataset)

# Convert categorical to numerical values
loan_dataset.replace({'Married':{'No':0,'Yes':1},'Gender':{'Male':1,'Female':0},'Self_Employed':{'No':0,'Yes':1},
                      'Property_Area':{'Rural':0,'Semiurban':1,'Urban':2},'Education':{'Graduate':1,'Not Graduate':0}},inplace=True)

loan_dataset.head()

# Separating the datat and label
X=loan_dataset.drop(columns=['Loan_ID','Loan_Status'],axis=1)
Y=loan_dataset['Loan_Status']

print(X)
print(Y)

"""**Train Test Split**"""

X_train, X_test, Y_train,Y_test=train_test_split(X,Y,test_size=0.1,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""**Training the model:support vector Machine Model**"""

classifier = svm.SVC(kernel='linear')

# Training th support vector
classifier.fit(X_train,Y_train)

"""**Model Evaluation**"""

# Accuracy score on training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print('Accuracy on training data:',training_data_accuracy)

# Accuracy data on training data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print('Accuracy on test data:',test_data_accuracy)